message Command {
    optional string uuid = 1;  // id of the entity meant to execute the command.
    optional string command = 2;
    repeated string args = 3; 
}


// ---------------------------------
// Service definition
// ---------------------------------

message RpcRequestWrapper {
    required uint32 sequence_number = 1;
    required string requestor = 2;
    required string method = 3;
    required bytes payload = 4;
}

message RpcResponseWrapper {
  required bytes payload = 1;
  required bool error = 2 [ default = false ];
  optional string error_string = 3;
  required uint32 sequence_number = 4;
}

message AckResponse {
    enum AckState{
        ACK = 0;
        NOACK = 1;
    }
    optional AckState ack = 1 [default = ACK];
}

// #####
// # Index Server Communication
// #####

message IndexTransactionFailed {
    required int32 platefile_id = 1;
    required int32 transaction_id = 2;
}

// #####
// # Dispatch Control Service
// #####

message ReaperRegistrationRequest{
    required string reaper_uuid = 1;
    optional string reaper_type = 2 [default = "generic"];
    optional string hostname = 3;
}

message ReaperUnregistrationRequest{
    required string reaper_uuid = 1;
}

message ReaperJobRequest {
    repeated string allowed_commands = 1; // leaving this empty means dispatch ought to respond with any job it has
    optional string reaper_uuid = 2; // ID the reaper requesting a job.
}

message ReaperJobResponse {
    required bool job_available = 1; // if this is false, reaper won't expect the other fields to be present
    optional string uuid = 2;  // uuid of the job
    optional string command = 3;
    repeated string args = 4;
}

message ReaperJobStartRequest {
    required string job_id = 1;
    optional string state = 2;
    optional string reaper_id = 3;
    optional string start_time = 4;
    optional int32 pid = 5;
}

message ReaperJobEndRequest{
    required string job_id = 1;
    optional string state = 2;
    optional string end_time = 3;
    optional string output = 4;
}

service DispatchCommandService{
    rpc registerReaper(ReaperRegistrationRequest) returns (AckResponse);
    rpc unregisterReaper(ReaperUnregistrationRequest) returns (AckResponse);
    rpc getJob(ReaperJobRequest) returns (ReaperJobResponse);
    
    // Job Status updates
    rpc jobStarted(ReaperJobStartRequest) returns (AckResponse);
    rpc jobEnded(ReaperJobEndRequest) returns (AckResponse);
}

// #####
// # Reaper Control Service
// #####

message ReaperStatusRequest {
    //required string reaper_uuid = 1;
}

message ReaperStatusResponse{
    //required string reaper_uuid = 1;
    required string status = 2;
}

message ReaperShutdownRequest{
}



service ReaperCommandService{
    rpc GetStatus(ReaperStatusRequest) returns (ReaperStatusResponse);
    //rpc Pause(ReaperPauseRequest) returns (ReaperStatusResponse);
    //rpc Resume(ReaperResumeRequest) returns (ReaperStatusResponse);
    rpc Echo(EchoMessage) returns (EchoMessage);
    rpc Shutdown(ReaperShutdownRequest) returns (ReaperStatusResponse);
}

// #####
// # RPC Testing
// #####
message EchoMessage{
    required string echotext = 1;
}
service TestService{
    rpc Echo(EchoMessage) returns (EchoMessage);
}
